import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from torch.utils.data import DataLoader, TensorDataset

# 生成多参数正弦波数据
def generate_multivariate_data(seq_length, num_samples, num_features):
    x = np.linspace(0, 100, num_samples)
    data = np.zeros((num_samples, num_features))
    for i in range(num_features):
        data[:, i] = np.sin(x + i)  # 每个特征的正弦波相位不同
    seq_data = []
    for i in range(len(data) - seq_length):
        seq_data.append(data[i:i+seq_length])
    seq_data = np.array(seq_data)
    return seq_data

seq_length = 30
num_samples = 1000
num_features = 3
data = generate_multivariate_data(seq_length, num_samples, num_features)

# 数据标准化
scaler = MinMaxScaler()
data = scaler.fit_transform(data.reshape(-1, num_features)).reshape(-1, seq_length, num_features)

# 构建输入和目标
X = data[:-1]
y = data[1:]

# 转换为张量
X = torch.tensor(X, dtype=torch.float32)
y = torch.tensor(y, dtype=torch.float32)
print('X.shape,y.shape',X.shape,y.shape)
assert 1==0
# 使用 DataLoader 进行批量处理
batch_size = 32
dataset = TensorDataset(X, y)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)


class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_len=5000):
        super(PositionalEncoding, self).__init__()
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-np.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        return x + self.pe[:x.size(0), :]
    
class MultivariateTimeSeriesTransformer(nn.Module):
    def __init__(self, input_dim, embed_size, num_heads, num_layers, dim_feedforward, dropout=0.1):
        super(MultivariateTimeSeriesTransformer, self).__init__()
        self.embedding = nn.Linear(input_dim, embed_size)
        self.positional_encoding = PositionalEncoding(embed_size)
        self.encoder_layers = nn.ModuleList([
            nn.TransformerEncoderLayer(embed_size, num_heads, dim_feedforward, dropout)
            for _ in range(num_layers)
        ])
        self.fc = nn.Linear(embed_size, input_dim)

    def forward(self, x):
        x = self.embedding(x)
        x = self.positional_encoding(x)
        for layer in self.encoder_layers:
            x = layer(x)
        x = self.fc(x)
        return x

# 模型初始化
input_dim = num_features
embed_size = 64
num_heads = 4
num_layers = 3
dim_feedforward = 256
dropout = 0.1

model = MultivariateTimeSeriesTransformer(input_dim, embed_size, num_heads, num_layers, dim_feedforward, dropout)

# 损失函数和优化器
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 训练模型
num_epochs = 100

for epoch in range(num_epochs):
    model.train()
    epoch_loss = 0
    for inputs, targets in dataloader:
        optimizer.zero_grad()
        outputs = model(inputs)
        print('outputs.shape,targets.shape',outputs.shape,targets.shape)
        assert 1==0
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        
        epoch_loss += loss.item() * inputs.size(0)  # 累加每个 batch 的损失
    
    epoch_loss /= len(dataloader.dataset)  # 计算平均损失
    print(f"Epoch {epoch+1}/{num_epochs}, Loss: {epoch_loss:.6f}")
    
# 评估模型
model.eval()
with torch.no_grad():
    predictions = model(X).numpy()

# 反标准化
predictions = predictions.reshape(-1, num_features)
actual = y.numpy().reshape(-1, num_features)
predictions = scaler.inverse_transform(predictions)
actual = scaler.inverse_transform(actual)

# 绘制结果
plt.figure(figsize=(15, 6))
for i in range(num_features):
    plt.subplot(num_features, 1, i + 1)
    plt.plot(actual[:, i], label="Actual")
    plt.plot(predictions[:, i], label="Predicted")
    plt.legend()
plt.show()